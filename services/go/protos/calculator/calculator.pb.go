// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: calculator.proto

package calculator

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Operation int32

const (
	Operation_ADD      Operation = 0
	Operation_SUBTRACT Operation = 1
)

var Operation_name = map[int32]string{
	0: "ADD",
	1: "SUBTRACT",
}

var Operation_value = map[string]int32{
	"ADD":      0,
	"SUBTRACT": 1,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}

func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}

type BinaryOperation struct {
	FirstOperand         float32   `protobuf:"fixed32,1,opt,name=first_operand,json=firstOperand,proto3" json:"first_operand,omitempty"`
	SecondOperand        float32   `protobuf:"fixed32,2,opt,name=second_operand,json=secondOperand,proto3" json:"second_operand,omitempty"`
	Operation            Operation `protobuf:"varint,3,opt,name=operation,proto3,enum=Operation" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BinaryOperation) Reset()         { *m = BinaryOperation{} }
func (m *BinaryOperation) String() string { return proto.CompactTextString(m) }
func (*BinaryOperation) ProtoMessage()    {}
func (*BinaryOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}
func (m *BinaryOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryOperation.Merge(m, src)
}
func (m *BinaryOperation) XXX_Size() int {
	return m.Size()
}
func (m *BinaryOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryOperation.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryOperation proto.InternalMessageInfo

func (m *BinaryOperation) GetFirstOperand() float32 {
	if m != nil {
		return m.FirstOperand
	}
	return 0
}

func (m *BinaryOperation) GetSecondOperand() float32 {
	if m != nil {
		return m.SecondOperand
	}
	return 0
}

func (m *BinaryOperation) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return Operation_ADD
}

type CalculationResult struct {
	Result               float32  `protobuf:"fixed32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculationResult) Reset()         { *m = CalculationResult{} }
func (m *CalculationResult) String() string { return proto.CompactTextString(m) }
func (*CalculationResult) ProtoMessage()    {}
func (*CalculationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{1}
}
func (m *CalculationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculationResult.Merge(m, src)
}
func (m *CalculationResult) XXX_Size() int {
	return m.Size()
}
func (m *CalculationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculationResult.DiscardUnknown(m)
}

var xxx_messageInfo_CalculationResult proto.InternalMessageInfo

func (m *CalculationResult) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterEnum("Operation", Operation_name, Operation_value)
	proto.RegisterType((*BinaryOperation)(nil), "BinaryOperation")
	proto.RegisterType((*CalculationResult)(nil), "CalculationResult")
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_c686ea360062a8cf) }

var fileDescriptor_c686ea360062a8cf = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0x4d, 0x6f, 0x1a, 0x31,
	0x10, 0xc5, 0x8b, 0x4a, 0x8b, 0x05, 0x74, 0x6b, 0xa9, 0x2d, 0x42, 0xed, 0x0a, 0x6d, 0x55, 0x09,
	0xd1, 0xb2, 0x2e, 0xf4, 0x46, 0x4e, 0x7c, 0x1c, 0x72, 0x23, 0x22, 0xe4, 0x92, 0x43, 0x22, 0xb3,
	0x38, 0x66, 0x95, 0xc5, 0x5e, 0xd9, 0x5e, 0x22, 0x2e, 0x39, 0xe4, 0x92, 0x7b, 0x72, 0xc9, 0x4f,
	0xca, 0x31, 0x52, 0xfe, 0x40, 0x44, 0xf2, 0x43, 0x22, 0xcc, 0xc2, 0x2a, 0xe1, 0xe4, 0x99, 0xf7,
	0x9e, 0xfc, 0x66, 0xe6, 0x41, 0xdb, 0x27, 0xa1, 0x1f, 0x87, 0x44, 0x0b, 0xe9, 0x45, 0x52, 0x68,
	0x51, 0xf9, 0xc1, 0x84, 0x60, 0x21, 0xc5, 0x24, 0x0a, 0x30, 0xe1, 0x5c, 0x68, 0xa2, 0x03, 0xc1,
	0x55, 0xc2, 0xfe, 0x35, 0x8f, 0xdf, 0x60, 0x94, 0x37, 0xd4, 0x05, 0x61, 0x8c, 0x4a, 0x2c, 0x22,
	0xa3, 0xd8, 0x55, 0xbb, 0xd7, 0x00, 0x7e, 0xee, 0x06, 0x9c, 0xc8, 0xc5, 0x20, 0xa2, 0xd2, 0x50,
	0xe8, 0x17, 0x2c, 0x9e, 0x05, 0x52, 0xe9, 0x53, 0xb1, 0x82, 0xf8, 0xa4, 0x0c, 0xaa, 0xa0, 0x66,
	0x0d, 0x0b, 0x06, 0x1c, 0xac, 0x31, 0xf4, 0x1b, 0x96, 0x14, 0xf5, 0x05, 0x9f, 0x6c, 0x55, 0x96,
	0x51, 0x15, 0xd7, 0xe8, 0x46, 0x56, 0x83, 0x79, 0xb1, 0xf9, 0xb8, 0x9c, 0xad, 0x82, 0x5a, 0xa9,
	0x05, 0xbd, 0xad, 0xd5, 0x30, 0x25, 0xdd, 0x3f, 0xf0, 0x4b, 0x2f, 0xd9, 0x74, 0xc5, 0x50, 0x15,
	0x87, 0x1a, 0x7d, 0x83, 0x39, 0x69, 0xaa, 0x64, 0x86, 0xa4, 0xab, 0xbb, 0x30, 0x9f, 0xce, 0xfb,
	0x11, 0x66, 0x3b, 0xfd, 0xbe, 0x9d, 0x41, 0x05, 0xf8, 0xe9, 0xf0, 0xa8, 0x3b, 0x1a, 0x76, 0x7a,
	0x23, 0x1b, 0xb4, 0x4e, 0x20, 0xec, 0x6d, 0x4f, 0x87, 0x0e, 0x60, 0x7e, 0xd3, 0x51, 0x64, 0x7b,
	0xef, 0x76, 0xae, 0x20, 0x6f, 0xc7, 0xdc, 0xfd, 0x79, 0xf5, 0xf8, 0x72, 0x6b, 0x7d, 0x77, 0x91,
	0xb9, 0xf4, 0xbc, 0x89, 0xd3, 0x24, 0xda, 0xa0, 0xde, 0xbd, 0xbc, 0xe9, 0x8c, 0xd0, 0x87, 0x56,
	0xb6, 0xe9, 0xfd, 0xab, 0x03, 0x4b, 0xee, 0xbf, 0xb1, 0x6b, 0x4f, 0xb5, 0x8e, 0x54, 0x1b, 0x63,
	0x16, 0xe8, 0x69, 0x3c, 0xf6, 0x7c, 0x31, 0xc3, 0x3e, 0x51, 0x3a, 0xa4, 0xb3, 0x20, 0x3c, 0xc7,
	0x94, 0xcf, 0xc5, 0xa2, 0x11, 0x85, 0x64, 0xc1, 0xa4, 0x88, 0xf9, 0x04, 0x2b, 0x2a, 0xe7, 0x81,
	0x4f, 0x15, 0x66, 0xe2, 0x7e, 0xe9, 0x80, 0x87, 0xa5, 0x03, 0x9e, 0x96, 0x0e, 0xb8, 0x7b, 0x76,
	0x32, 0xc7, 0x5f, 0x53, 0xdf, 0xbd, 0xb4, 0x1c, 0xe7, 0x4c, 0x82, 0xff, 0x5f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0x8c, 0x3a, 0x41, 0x21, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	Calculate(ctx context.Context, in *BinaryOperation, opts ...grpc.CallOption) (*CalculationResult, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Calculate(ctx context.Context, in *BinaryOperation, opts ...grpc.CallOption) (*CalculationResult, error) {
	out := new(CalculationResult)
	err := c.cc.Invoke(ctx, "/Calculator/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	Calculate(context.Context, *BinaryOperation) (*CalculationResult, error)
}

// UnimplementedCalculatorServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (*UnimplementedCalculatorServer) Calculate(ctx context.Context, req *BinaryOperation) (*CalculationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calculator/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Calculate(ctx, req.(*BinaryOperation))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _Calculator_Calculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}

func (m *BinaryOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BinaryOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Operation != 0 {
		i = encodeVarintCalculator(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x18
	}
	if m.SecondOperand != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SecondOperand))))
		i--
		dAtA[i] = 0x15
	}
	if m.FirstOperand != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FirstOperand))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *CalculationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Result))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BinaryOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirstOperand != 0 {
		n += 5
	}
	if m.SecondOperand != 0 {
		n += 5
	}
	if m.Operation != 0 {
		n += 1 + sovCalculator(uint64(m.Operation))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalculator(x uint64) (n int) {
	return sovCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BinaryOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstOperand", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FirstOperand = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondOperand", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SecondOperand = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Result = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalculator = fmt.Errorf("proto: unexpected end of group")
)
